pub const SIG_RSA_V15_SHA1: i64 = -256;
pub const SIG_ECDSA_SHA1: i64 = -255;
pub const SIG_ECDSA_SHA256: i64 = 0;
pub const SIG_ECDSA_SHA384: i64 = 1;
pub const SIG_ECDSA_SHA512: i64 = 2;
pub const SIG_ECDSA_SHAKE128: i64 = 3;
pub const SIG_ECDSA_SHAKE256: i64 = 4;
pub const SIG_ED25519: i64 = 12;
pub const SIG_ED448: i64 = 13;
pub const SIG_SHA256_HMAC_SHA256: i64 = 14; //TODO
pub const SIG_SHA384_HMAC_SHA384: i64 = 15; //TODO
pub const SIG_SHA512_HMAC_SHA512: i64 = 16; //TODO
pub const SIG_RSA_V15_SHA256: i64 = 23;
pub const SIG_RSA_V15_SHA384: i64 = 24;
pub const SIG_RSA_V15_SHA512: i64 = 25;
pub const SIG_RSA_PSS_SHA256: i64 = 26;
pub const SIG_RSA_PSS_SHA384: i64 = 27;
pub const SIG_RSA_PSS_SHA512: i64 = 28;
pub const SIG_RSA_PSS_SHAKE128: i64 = 29;
pub const SIG_RSA_PSS_SHAKE256: i64 = 30;
pub const SIG_HSS_LMS: i64 = 42; //30 0D 06 0B 2A 86 48 86 F7 0D 01 09 10 03 11
pub const SIG_XMSS: i64 = 43; //30 0B 06 09 04 00 7F 00 0F 01 01 0D 00
pub const SIG_XMSS_MT: i64 = 44; //30 0B 06 09 04 00 7F 00 0F 01 01 0E 00
pub const SIG_SM2_V15_SM3: i64 = 45; //30 0A 06 08 2A 81 1C CF 55 01 83 75
pub fn sig_map(alg_id: &[u8]) -> Option<i64> {
    let value = lder(alg_id, ASN1_SEQ);
    match value {
        [0x06, 0x03, 0x2B, 0x65, ..] => match value[4..] {
            [0x70] => Some(SIG_ED25519),
            [0x71] => Some(SIG_ED448),
            _ => None,
        },
        [0x06, 0x08, 0x2a, 0x81, 0x1c, 0xcf, 0x55, 0x01, 0x83, 0x75] => Some(SIG_SM2_V15_SM3),
        [0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, ..] => match value[9..] {
            [0x01] => Some(SIG_ECDSA_SHA1),
            [0x02] => Some(SIG_ECDSA_SHA256),
            [0x03] => Some(SIG_ECDSA_SHA384),
            [0x04] => Some(SIG_ECDSA_SHA512),
            _ => None,
        },
        [0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x06, ..] => match value[9..] {
            [0x20] => Some(SIG_ECDSA_SHAKE128),
            [0x21] => Some(SIG_ECDSA_SHAKE256),
            [0x1E] => Some(SIG_RSA_PSS_SHAKE128),
            [0x1F] => Some(SIG_RSA_PSS_SHAKE256),
            _ => None,
        },
        [0x06, 0x09, 0x04, 0x00, 0x7f, 0x00, 0x0f, 0x01, 0x01, ..] => match value[9..] {
            [0x0d, 0x00] => Some(SIG_XMSS),
            [0x0e, 0x00] => Some(SIG_XMSS_MT),
            _ => None,
        },
        [0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, ..] => match value[10..] {
            [0x05, 0x05, 0x00] => Some(SIG_RSA_V15_SHA1),
            [0x0A, 0x30, 0x34, 0xA0, 0x0F, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, ..] => match value[27..] {
                [0x01, 0x05, 0x00, 0xA1, 0x1C, 0x30, 0x1A, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x08, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0xa2, 0x03, 0x02, 0x01, 0x20] => {
                    Some(SIG_RSA_PSS_SHA256)
                }
                [0x02, 0x05, 0x00, 0xA1, 0x1C, 0x30, 0x1A, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x08, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0xa2, 0x03, 0x02, 0x01, 0x30] => {
                    Some(SIG_RSA_PSS_SHA384)
                }
                [0x03, 0x05, 0x00, 0xA1, 0x1C, 0x30, 0x1A, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x08, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0xa2, 0x03, 0x02, 0x01, 0x40] => {
                    Some(SIG_RSA_PSS_SHA512)
                }
                _ => None,
            },
            [0x0B, 0x05, 0x00] => Some(SIG_RSA_V15_SHA256),
            [0x0C, 0x05, 0x00] => Some(SIG_RSA_V15_SHA384),
            [0x0D, 0x05, 0x00] => Some(SIG_RSA_V15_SHA512),
            _ => None,
        },
        [0x06, 0x0b, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x10, 0x03, 0x11] => Some(SIG_HSS_LMS),
        _ => None,
    }
}